pipeline {
    agent {
        label 'master'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                git 'git@github.com:tmtsoftware/csw.git'
            }
        }

        stage('Build') {
            steps {
                sh "sbt clean compile"
            }
        }

        stage('Multi-Node Test') {
            // These tests cover the scenario of multiple components in multiple containers on different machines.
            steps {
                sh "sbt -DenableCoverage=false csw-location-server/multiNodeTest"
                sh "sbt -DenableCoverage=false csw-config-client/multiNodeTest"
                sh "sbt -DenableCoverage=false csw-config-cli/multiNodeTest"
                sh "sbt -DenableCoverage=false csw-framework/multiNodeTest"
                sh "sbt -DenableCoverage=false integration/multiNodeTest"
            }
        }

        stage('Package') {
            steps {
                sh "./integration/scripts/package_integration.sh"
            }
        }

        stage('Multi-NICs Docker') {
            steps {
                sh "./integration/scripts/multiple_nic_test.sh"
            }
        }

        stage('Paradox Validate Links') {
            steps {
                sh "sbt docs/Paradox/paradoxValidateLinks"
            }
        }
    }
    post {
        always {
            script {
                sendNotification(currentBuild.result)
            }
        }
    }
}

def sendNotification(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = '${JELLY_SCRIPT,template="html"}'

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
        emailext(
                subject: subject,
                body: details,
                to: "tmt-csw@thoughtworks.com"
        )
    }

    slackSend(channel: "#csw-build", color: colorCode, message: summary)
}
